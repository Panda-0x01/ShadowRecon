/**
 * Vulnerability Scanner Frontend JavaScript
 * Handles all UI interactions and API communication
 */

class VulnerabilityScanner {
    constructor() {
        this.isScanning = false;
        this.statusPollInterval = null;
        this.init();
    }

    init() {
        this.bindEvents();
        this.updateUI();
    }

    bindEvents() {
        // Form submission
        document.getElementById('scanForm').addEventListener('submit', (e) => {
            e.preventDefault();
            this.startScan();
        });

        // Stop scan button
        document.getElementById('stopScanBtn').addEventListener('click', () => {
            this.stopScan();
        });

        // Download report button
        document.getElementById('downloadBtn').addEventListener('click', () => {
            this.downloadReport();
        });

        // Form validation
        document.getElementById('targetUrl').addEventListener('input', (e) => {
            this.validateUrl(e.target);
        });
    }

    validateUrl(input) {
        const url = input.value.trim();
        const urlPattern = /^https?:\/\/.+/;
        
        if (url && !urlPattern.test(url)) {
            input.setCustomValidity('Please enter a valid URL starting with http:// or https://');
        } else {
            input.setCustomValidity('');
        }
    }

    async startScan() {
        if (this.isScanning) {
            this.showNotification('Scan already in progress', 'warning');
            return;
        }

        const formData = this.getFormData();
        if (!formData) return;

        try {
            this.isScanning = true;
            this.updateUI();
            this.clearResults();
            
            const response = await fetch('/api/scan', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(formData)
            });

            const result = await response.json();

            if (response.ok) {
                this.showNotification('Scan started successfully', 'success');
                this.startStatusPolling();
            } else {
                throw new Error(result.error || 'Failed to start scan');
            }

        } catch (error) {
            this.showNotification(`Error: ${error.message}`, 'error');
            this.isScanning = false;
            this.updateUI();
        }
    }

    async stopScan() {
        try {
            const response = await fetch('/api/stop', {
                method: 'POST'
            });

            if (response.ok) {
                this.showNotification('Scan stopped', 'info');
                this.isScanning = false;
                this.stopStatusPolling();
                this.updateUI();
            }
        } catch (error) {
            this.showNotification(`Error stopping scan: ${error.message}`, 'error');
        }
    }

    getFormData() {
        const targetUrl = document.getElementById('targetUrl').value.trim();
        const maxDepth = parseInt(document.getElementById('maxDepth').value);
        const delay = parseFloat(document.getElementById('delay').value);
        
        // Get selected vulnerability types
        const scanTypes = Array.from(document.querySelectorAll('input[name="scanTypes"]:checked'))
            .map(checkbox => checkbox.value);

        if (!targetUrl) {
            this.showNotification('Please enter a target URL', 'error');
            return null;
        }

        if (scanTypes.length === 0) {
            this.showNotification('Please select at least one vulnerability type', 'error');
            return null;
        }

        return {
            target_url: targetUrl,
            max_depth: maxDepth,
            delay: delay,
            scan_types: scanTypes
        };
    }

    startStatusPolling() {
        this.statusPollInterval = setInterval(() => {
            this.pollStatus();
        }, 1000); // Poll every second
    }

    stopStatusPolling() {
        if (this.statusPollInterval) {
            clearInterval(this.statusPollInterval);
            this.statusPollInterval = null;
        }
    }

    async pollStatus() {
        try {
            const response = await fetch('/api/status');
            const status = await response.json();

            this.updateStatus(status);

            // Stop polling if scan is complete
            if (!status.is_running && this.isScanning) {
                this.isScanning = false;
                this.stopStatusPolling();
                this.updateUI();
                this.displayResults(status.results);
            }

        } catch (error) {
            console.error('Error polling status:', error);
        }
    }

    updateStatus(status) {
        // Update progress bar
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        
        progressFill.style.width = `${status.progress}%`;
        progressText.textContent = `${status.progress}%`;

        // Update statistics
        document.getElementById('urlsScanned').textContent = status.urls_scanned;
        document.getElementById('vulnFound').textContent = status.vulnerabilities_found;
        document.getElementById('currentUrl').textContent = 
            status.current_url || '-';

        // Update logs
        this.updateLogs(status.logs);
    }

    updateLogs(logs) {
        const logsContainer = document.getElementById('logsContainer');
        
        // Clear existing logs
        logsContainer.innerHTML = '';

        // Add new logs
        logs.forEach(log => {
            const logEntry = document.createElement('div');
            logEntry.className = 'log-entry';
            
            logEntry.innerHTML = `
                <span class="log-timestamp">${log.timestamp}</span>
                <span class="log-level ${log.level}">${log.level}</span>
                <span class="log-message">${this.escapeHtml(log.message)}</span>
            `;
            
            logsContainer.appendChild(logEntry);
        });

        // Auto-scroll to bottom
        logsContainer.scrollTop = logsContainer.scrollHeight;
    }

    displayResults(results) {
        const resultsSection = document.getElementById('resultsSection');
        const resultsSummary = document.getElementById('resultsSummary');
        const resultsContent = document.getElementById('resultsContent');

        // Show results section
        resultsSection.style.display = 'block';
        resultsSection.scrollIntoView({ behavior: 'smooth' });

        // Update summary
        const totalVulns = results.length;
        const highRisk = results.filter(v => v.risk_level === 'HIGH').length;
        const mediumRisk = results.filter(v => v.risk_level === 'MEDIUM').length;
        const lowRisk = results.filter(v => v.risk_level === 'LOW').length;

        resultsSummary.innerHTML = `
            <div class="summary-item">
                <span class="summary-number">${totalVulns}</span>
                <span class="summary-label">Total Vulnerabilities</span>
            </div>
            <div class="summary-item">
                <span class="summary-number" style="color: #e74c3c;">${highRisk}</span>
                <span class="summary-label">High Risk</span>
            </div>
            <div class="summary-item">
                <span class="summary-number" style="color: #f39c12;">${mediumRisk}</span>
                <span class="summary-label">Medium Risk</span>
            </div>
            <div class="summary-item">
                <span class="summary-number" style="color: #27ae60;">${lowRisk}</span>
                <span class="summary-label">Low Risk</span>
            </div>
        `;

        // Display vulnerabilities
        if (results.length === 0) {
            resultsContent.innerHTML = `
                <div class="empty-state">
                    <i class="fas fa-shield-alt"></i>
                    <h3>No Vulnerabilities Found</h3>
                    <p>The scan completed successfully with no security issues detected.</p>
                </div>
            `;
        } else {
            resultsContent.innerHTML = results.map(vuln => this.createVulnerabilityCard(vuln)).join('');
        }

        // Add animation
        resultsSection.classList.add('fade-in');
    }

    createVulnerabilityCard(vuln) {
        const riskClass = `risk-${vuln.risk_level.toLowerCase()}`;
        
        return `
            <div class="vulnerability-card">
                <div class="vuln-header">
                    <span class="vuln-type">${this.escapeHtml(vuln.vuln_type)}</span>
                    <span class="risk-badge ${riskClass}">${vuln.risk_level}</span>
                </div>
                <div class="vuln-details">
                    <div class="detail-row">
                        <span class="detail-label">URL:</span>
                        <span class="detail-value">${this.escapeHtml(vuln.url)}</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Parameter:</span>
                        <span class="detail-value">${this.escapeHtml(vuln.parameter)}</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Method:</span>
                        <span class="detail-value">${vuln.method}</span>
                    </div>
                    <div class="detail-row">
                        <span class="detail-label">Description:</span>
                        <span class="detail-value">${this.escapeHtml(vuln.description)}</span>
                    </div>
                    ${vuln.payload !== 'N/A' ? `
                        <div class="detail-row">
                            <span class="detail-label">Payload:</span>
                            <div class="payload-code">${this.escapeHtml(vuln.payload)}</div>
                        </div>
                    ` : ''}
                </div>
            </div>
        `;
    }

    async downloadReport() {
        try {
            const response = await fetch('/api/download-report');
            
            if (response.ok) {
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `vulnerability_report_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.txt`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                
                this.showNotification('Report downloaded successfully', 'success');
            } else {
                const result = await response.json();
                throw new Error(result.error || 'Failed to download report');
            }
        } catch (error) {
            this.showNotification(`Error downloading report: ${error.message}`, 'error');
        }
    }

    updateUI() {
        const startBtn = document.getElementById('startScanBtn');
        const stopBtn = document.getElementById('stopScanBtn');
        const scanStatus = document.getElementById('scanStatus');
        const logsSection = document.getElementById('logsSection');
        const form = document.getElementById('scanForm');

        if (this.isScanning) {
            // Scanning state
            startBtn.disabled = true;
            startBtn.innerHTML = '<i class="fas fa-spinner loading-spinner"></i> Scanning...';
            stopBtn.disabled = false;
            scanStatus.style.display = 'block';
            logsSection.style.display = 'block';
            
            // Disable form inputs
            form.querySelectorAll('input, select').forEach(input => {
                input.disabled = true;
            });
        } else {
            // Idle state
            startBtn.disabled = false;
            startBtn.innerHTML = '<i class="fas fa-play"></i> Start Scan';
            stopBtn.disabled = true;
            
            // Enable form inputs
            form.querySelectorAll('input, select').forEach(input => {
                input.disabled = false;
            });
        }
    }

    clearResults() {
        const scanStatus = document.getElementById('scanStatus');
        const logsSection = document.getElementById('logsSection');
        const resultsSection = document.getElementById('resultsSection');
        
        // Reset progress
        document.getElementById('progressFill').style.width = '0%';
        document.getElementById('progressText').textContent = '0%';
        
        // Reset stats
        document.getElementById('urlsScanned').textContent = '0';
        document.getElementById('vulnFound').textContent = '0';
        document.getElementById('currentUrl').textContent = '-';
        
        // Clear logs
        document.getElementById('logsContainer').innerHTML = '';
        
        // Hide results
        resultsSection.style.display = 'none';
    }

    showNotification(message, type = 'info') {
        // Create notification element
        const notification = document.createElement('div');
        notification.className = `notification notification-${type}`;
        notification.innerHTML = `
            <div class="notification-content">
                <i class="fas fa-${this.getNotificationIcon(type)}"></i>
                <span>${this.escapeHtml(message)}</span>
            </div>
            <button class="notification-close" onclick="this.parentElement.remove()">
                <i class="fas fa-times"></i>
            </button>
        `;

        // Add styles for notification
        this.addNotificationStyles();

        // Add to page
        document.body.appendChild(notification);

        // Auto-remove after 5 seconds
        setTimeout(() => {
            if (notification.parentElement) {
                notification.remove();
            }
        }, 5000);
    }

    getNotificationIcon(type) {
        const icons = {
            success: 'check-circle',
            error: 'exclamation-circle',
            warning: 'exclamation-triangle',
            info: 'info-circle'
        };
        return icons[type] || 'info-circle';
    }

    addNotificationStyles() {
        if (document.getElementById('notification-styles')) return;

        const style = document.createElement('style');
        style.id = 'notification-styles';
        style.textContent = `
            .notification {
                position: fixed;
                top: 20px;
                right: 20px;
                background: #fff;
                border-radius: 8px;
                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
                padding: 16px;
                min-width: 300px;
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: space-between;
                animation: slideIn 0.3s ease-out;
                border-left: 4px solid #3498db;
            }

            .notification-success {
                border-left-color: #27ae60;
            }

            .notification-error {
                border-left-color: #e74c3c;
            }

            .notification-warning {
                border-left-color: #f39c12;
            }

            .notification-info {
                border-left-color: #3498db;
            }

            .notification-content {
                display: flex;
                align-items: center;
                gap: 12px;
            }

            .notification-content i {
                font-size: 18px;
            }

            .notification-success .notification-content i {
                color: #27ae60;
            }

            .notification-error .notification-content i {
                color: #e74c3c;
            }

            .notification-warning .notification-content i {
                color: #f39c12;
            }

            .notification-info .notification-content i {
                color: #3498db;
            }

            .notification-close {
                background: none;
                border: none;
                cursor: pointer;
                color: #bdc3c7;
                padding: 4px;
                border-radius: 4px;
                transition: color 0.3s ease;
            }

            .notification-close:hover {
                color: #95a5a6;
            }

            @keyframes slideIn {
                from {
                    transform: translateX(100%);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
        `;
        document.head.appendChild(style);
    }

    escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// Initialize the scanner when the page loads
document.addEventListener('DOMContentLoaded', () => {
    new VulnerabilityScanner();
});