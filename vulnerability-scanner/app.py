from flask import Flask, render_template, request, jsonify, send_file # type: ignore
from flask_cors import CORS # type: ignore
import json
import threading
import time
from datetime import datetime
import os
from scanner_engine import VulnerabilityScanner

app = Flask(__name__)
CORS(app)

# Global variables to track scan status
scan_status = {
    'is_running': False,
    'progress': 0,
    'current_url': '',
    'vulnerabilities_found': 0,
    'urls_scanned': 0,
    'total_urls': 0,
    'logs': [],
    'results': []
}

def update_scan_status(message, level="INFO", progress=None):
    """Update scan status for real-time updates"""
    global scan_status
    timestamp = datetime.now().strftime("%H:%M:%S")
    log_entry = {
        'timestamp': timestamp,
        'level': level,
        'message': message
    }
    scan_status['logs'].append(log_entry)
    
    # Keep only last 100 log entries
    if len(scan_status['logs']) > 100:
        scan_status['logs'] = scan_status['logs'][-100:]
    
    if progress is not None:
        scan_status['progress'] = progress

@app.route('/')
def index():
    """Serve the main page"""
    return render_template('index.html')

@app.route('/api/scan', methods=['POST'])
def start_scan():
    """Start vulnerability scan"""
    global scan_status
    
    if scan_status['is_running']:
        return jsonify({'error': 'Scan already in progress'}), 400
    
    data = request.get_json()
    target_url = data.get('target_url', '').strip()
    max_depth = int(data.get('max_depth', 2))
    delay = float(data.get('delay', 1.0))
    scan_types = data.get('scan_types', ['xss', 'sqli', 'csrf'])
    
    if not target_url:
        return jsonify({'error': 'Target URL is required'}), 400
    
    # Reset scan status
    scan_status = {
        'is_running': True,
        'progress': 0,
        'current_url': '',
        'vulnerabilities_found': 0,
        'urls_scanned': 0,
        'total_urls': 0,
        'logs': [],
        'results': []
    }
    
    # Start scan in background thread
    def run_scan():
        try:
            scanner = VulnerabilityScanner(
                target_url, 
                max_depth=max_depth, 
                delay=delay,
                scan_types=scan_types,
                status_callback=update_scan_status
            )
            results = scanner.run_scan()
            scan_status['results'] = results
            scan_status['is_running'] = False
            update_scan_status("Scan completed successfully", "SUCCESS")
        except Exception as e:
            scan_status['is_running'] = False
            update_scan_status(f"Scan failed: {str(e)}", "ERROR")
    
    thread = threading.Thread(target=run_scan)
    thread.daemon = True
    thread.start()
    
    return jsonify({'message': 'Scan started successfully'})

@app.route('/api/status')
def get_status():
    """Get current scan status"""
    return jsonify(scan_status)

@app.route('/api/stop', methods=['POST'])
def stop_scan():
    """Stop current scan"""
    global scan_status
    scan_status['is_running'] = False
    update_scan_status("Scan stopped by user", "WARNING")
    return jsonify({'message': 'Scan stopped'})

@app.route('/api/download-report')
def download_report():
    """Download vulnerability report"""
    if not scan_status['results']:
        return jsonify({'error': 'No scan results available'}), 400
    
    # Generate report content
    report_content = generate_report(scan_status['results'])
    
    # Save to temporary file
    filename = f"vuln_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
    filepath = os.path.join('/tmp', filename)
    
    with open(filepath, 'w') as f:
        f.write(report_content)
    
    return send_file(filepath, as_attachment=True, download_name=filename)

def generate_report(results):
    """Generate text report from results"""
    report = f"""
VULNERABILITY SCAN REPORT
========================
Scan Date: {datetime.now().strftime("%Y-%m-%d %H:%M:%S")}
Vulnerabilities Found: {len(results)}

"""
    
    if not results:
        report += "âœ… No vulnerabilities detected!\n"
        return report
    
    for i, vuln in enumerate(results, 1):
        report += f"\n{i}. {vuln['vuln_type']}\n"
        report += f"   Risk Level: {vuln['risk_level']}\n"
        report += f"   URL: {vuln['url']}\n"
        report += f"   Parameter: {vuln['parameter']}\n"
        report += f"   Method: {vuln['method']}\n"
        report += f"   Payload: {vuln['payload']}\n"
        report += f"   Description: {vuln['description']}\n"
        report += "-" * 50 + "\n"
    
    return report

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)